"""
Django settings for education project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'courses.apps.CoursesConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'students.apps.StudentsConfig',
    'debug_toolbar',
    'embed_video',
    'memcache_status',

]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'education.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'education.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ru-ru'  # 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# -------------------------------------------------------- STATIC
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'

# здесь мы указываем откуда будем доставать статику и подключать к шаблону, с помощью тега {% static 'css/style.css' %}
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# здесь мы указываем куда django будет собирать всю статику проекта при команде collectstatic
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# -------------------------------------------------------- MEDIA

# базовый url от которого будет формироваться адреса файлов.
MEDIA_URL = '/media/'

# путь в файловой системе, где эти файлы будут храниться
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# --------------------------------------- django-debug-toolbar
INTERNAL_IPS = ('127.0.0.1',)

# -------------------------------------------------------- LOGGING settings
# https://docs.djangoproject.com/en/3.2/topics/logging/
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {  # formatters - отвечает за то, каким образом будет выводиться сообщение
        'verbose': {
            'format':
                '{levelname} {asctime} {module} {message}',
            #   {levelname} - уровень данного сообщения
            #   {asctime} - время
            #   {module} - модуль из которого происходил запрос
            #   {message} - сам запрос, который необходимо фиксировать
            'style':
                '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        # 'special': {
        #     '()': 'project.logging.SpecialFilter',
        #     'foo': 'bar',
        # },
        'require_debug_true': {  # require_debug_true - мы будем фиксировать логирование, когда DEBUG = True
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # хэндлеры говорят о том, каким образом мы можем обрабатывать полученное сообщение
        # куда их выводить, в консоль, в файл, на почту?
        'console': {  # вывести в консоль
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # вывести в файл
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR.joinpath('log/application.log'),
            'formatter': 'verbose',
        },
        # 'mail_admins': {  # послать по почте
        #     'level': 'ERROR',
        #     'class': 'django.utils.log.AdminEmailHandler',
        #     'filters': ['special']
        # }
    },
    'loggers': {  # что мы фактически фиксируем, и куда
        'django.db.backends': {  # 'django.db.backends' - настройки фиксации логирования запросов в бд
            'handlers': ['file'],  # в записываем в файл
            'level': 'DEBUG',
        },
        'django.request': {  # 'django.request' - настройки фиксации логирования HTTP запросов
            'handlers': ['file'],  # в записываем в файл
            'level': 'DEBUG',
            'propagate': False,
        },
        # 'django': {
        #     'handlers': ['console'],
        #     'propagate': True,
        # },
        # 'myproject.custom': {
        #     'handlers': ['console', 'mail_admins'],
        #     'level': 'INFO',
        #     'filters': ['special']
        # }
    }
}

# -------------------------------------- LOGIN

# куда django будет перенаправлять при успешной авторизации (если не указан GET параметр next)
LOGIN_REDIRECT_URL = 'courses:manage_course_list'

# при декоратре @login_required или LoginRequiredMixin - куда перенаравлять для авторизации
LOGIN_URL = 'login'

# адрес по которому пользователь выйдет из своего аккаунта (разорвётся сессия)
LOGOUT_URL = 'logout'

# -------------------------------------- CACHES
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
    }
}
